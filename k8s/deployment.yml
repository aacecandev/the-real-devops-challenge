---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: restaurant-serviceaccount
  name: restaurant-serviceaccount
  namespace: restaurant
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/name: restaurant-clusterrole
  name: restaurant-clusterrole
rules:
  - apiGroups:
      - ''
    resources:
      - endpoints
      - nodes
      - pods
    verbs:
      - list
      - watch
  - apiGroups:
      - ''
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ''
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ''
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: restaurant-clusterrolebinding
  name: restaurant-clusterrolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: restaurant-clusterrole
subjects:
  - kind: ServiceAccount
    name: restaurant-serviceaccount
    namespace: restaurant
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: restaurant-deployment-api
  namespace: restaurant
spec:
  selector:
    matchLabels:
      app: restaurant-app
  revisionHistoryLimit: 10
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  replicas: 2
  template:
    metadata:
      labels:
        app: restaurant-app
    spec:
      containers:
      - name: python-api
        image: aacecandev/python-api:kind
        imagePullPolicy: IfNotPresent
        env:
          - name: MONGO_URI_DEV
            valueFrom:
              secretKeyRef:
                name: restaurant-secrets
                key: MONGO_URI_DEV
        ports:
          - name: api-port
            containerPort: 8080
            protocol: TCP
            hostPort: 8080
        resources:
            requests:
              cpu: 100m
              memory: 90Mi
            limits:
              cpu: 200m
              memory: 200Mi
      terminationGracePeriodSeconds: 0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: restaurant-deployment-db
  namespace: restaurant
spec:
  selector:
    matchLabels:
      app: restaurant-db
  revisionHistoryLimit: 10
  replicas: 1
  template:
    metadata:
      labels:
        app: restaurant-db
    spec:
      containers:
      - name: db-api
        image: aacecandev/db-api:kind
        env:
          - name: MONGO_INITDB_ROOT_USERNAME
            value: root
          - name: MONGO_INITDB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: restaurant-secrets
                key: root_password
          - name: MONGO_INITDB_DATABASE
            value: restaurant
          - name: MONGO_NON_ROOT_USERNAME
            value: igz
          - name: MONGO_NON_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: restaurant-secrets
                key: api_password
        imagePullPolicy: IfNotPresent
        ports:
          - name: mongo-port
            containerPort: 27017
            protocol: TCP
            hostPort: 27017
        resources:
            requests:
              cpu: 100m
              memory: 90Mi
            limits:
              cpu: 200m
              memory: 200Mi
      terminationGracePeriodSeconds: 0

